//Shamelessly stolen from http://www.jessespevack.com/blog/2016/2/9/turn-a-google-form-response-into-a-calendar-event and barely modified from it's original form.
// When you add this to a new spreadsheet you need to remember to add the Moments library to the spreadsheet.
// To do that, you need to go to Resources->Libraries... in the top bar and then add the Moments library 
// with the code "MHMchiX6c1bwSqGM1PZiW_PxhMjh3Sh48". Ensure you're on the latest version using the Versions dropdown.

// Load the moment.js library once; this library makes dealing with dates not terrible
var moment = Moment.load();

// Set some global variables
var GLOBAL = {
  // The id of the form we will use to create calendar events 
  formId : "<FORMID>",
  
  // The id of the calendar we will create events on
  calendarId : "<CALENDARID>",

  // A mapping of form item titles to sections of the calendar event
  formMap : {
    eventTitle: "Your Name",
    startTime : "Time Off Start Date",
    endTime: "Time Off End Date",
    requestedHours: "Number of hours requested: *One Day = 8 Hours",
    email: "Email address for calendar to add PTO to",
  },
  }

//function called by the form submission event
function onFormSubmit() {
  //store incoming form responses in an event object variable
  var eventObject = getFormResponse();
  //use the event object to create a new calendar event store the event in a variable called event
  var event = createCalendarEvent(eventObject);
}

// Get a form object by opening the form using the form id stored in the formID variable
function getFormResponse() {
  var form = FormApp.openById(GLOBAL.formId),
        // Get all responses from the form. This method returns an array of form responses.
        responses = form.getResponses(),
        // Find the length of the responses array
        length = responses.length,
        // Find the index of the most recent form response. Since arrays are zero indexed, the last response is the total number of responses minus one.
        lastResponse = responses[length-1],
        // Get an array of responses to every question item within the form
        itemResponses = lastResponse.getItemResponses(),
        // Create an empty object to store data from the last form response 
      eventObject = {};
  // Loop through each item response in the item response array
  for (var i = 0, x = itemResponses.length; i<x; i++) {
    //Get the title of the form item being iterated on
    var thisItem = itemResponses[i].getItem().getTitle(),
        // Get the submitted response to the form item being iterated on
        thisResponse = itemResponses[i].getResponse();
    // Based on the form question title, map the response of the item being iterated on into our eventObject variable use the GLOBAL variable formMap sub object to match form question titles to property keys in the event object
    switch (thisItem) {
      case GLOBAL.formMap.eventTitle:
        eventObject.title = "PTO - " + thisResponse;
        break;
      case GLOBAL.formMap.startTime:
        eventObject.startTime = thisResponse;
        break;
      case GLOBAL.formMap.endTime:
        eventObject.endTime = thisResponse;
        break;
      case GLOBAL.formMap.requestedHours:
        eventObject.requestedHours = thisResponse;
        break;
      case GLOBAL.formMap.email:
        eventObject.email = thisResponse;
        break;
    }
  }
  return eventObject;
 };

// Creates an all-day event for an entry in the form
function createCalendarEvent(eventObject) {
  //Get a calendar object by opening the calendar using the calendar id stored in the GLOBAL variable object
  var calendar = CalendarApp.getCalendarById(GLOBAL.calendarId),
      //The title for the event that will be created
      title = eventObject.title,
      //The start date of the event that will be created
      startTime = moment(eventObject.startTime).toDate(),
      //The end date of the event that will be created
      endTime = moment(eventObject.endTime).toDate();
  // Invite the requested email included in "Email address for calendar to add PTO to"
  var options = {
    guests: eventObject.email,
    sendInvites: true,
  };
  // If their requested PTO hours are fewer than 8, create a calendar event that states how many hours they're taking.
  // If they're only taking one day of PTO, just take the start date of the PTO to create a one-day event,
  // otherwise, create an event the length of their longer PTO.
  if (eventObject.requestedHours < 8) {
    title = eventObject.requestedHours + " hours " + eventObject.title
    Logger.log(title);
    var event = calendar.createAllDayEvent(title, startTime)
  } else if (endTime <= startTime) {
    var event = calendar.createAllDayEvent(title, startTime)
    } else {
      // Adding a day to the end date so that the calendar event goes through the full day of the end of their PTO.
      var adjustedendTime = moment(eventObject.endTime).add(1, 'days').toDate();
      var event = calendar.createAllDayEvent(title, startTime, adjustedendTime)
      }
  return event;
}
